import { createHmac as createHmac$1 } from "node:crypto";
import { h as hashToken$1, i as isValid$1, s as sign$1, a as signData$1, v as validate$1 } from "./shared-BvCEfSRU.js";
import { g, j, E, e, k, D, d, f, F, c, p, b } from "./shared-BvCEfSRU.js";
function textToBuffer(text) {
  return Buffer.from(typeof text === "string" ? text : new Uint8Array(text));
}
const createHmac = (data, key) => {
  return createHmac$1("sha256", textToBuffer(key)).update(textToBuffer(data)).digest();
};
function hashToken(token) {
  return Buffer.from(hashToken$1(token, createHmac));
}
function isValid(value, token, options) {
  return isValid$1(value, token, validate, options);
}
function sign(data, key, authDate, options) {
  return sign$1(data, key, authDate, signData, options);
}
function signData(data, key, options) {
  return signData$1(data, key, createHmac, options);
}
function validate(value, token, options) {
  return validate$1(value, token, signData, options);
}
export {
  g as ERR_AUTH_DATE_INVALID,
  j as ERR_EXPIRED,
  E as ERR_HASH_INVALID,
  e as ERR_PARSE,
  k as ERR_SIGN_INVALID,
  D as ERR_UNEXPECTED_VALUE,
  d as TypedError,
  hashToken,
  f as initDataToSearchParams,
  F as isErrorOfType,
  isValid,
  c as isValid3rd,
  p as parse,
  sign,
  signData,
  validate,
  b as validate3rd
};
//# sourceMappingURL=node.js.map
